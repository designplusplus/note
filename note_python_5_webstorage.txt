############################[資料交換格式，資料庫，web]############################
============================ CSV
>>> import csv
>>> villains = [
...     ['Doctor','No'],
...     ['Rosa','Klebb'],
...     ['Mister','Big'],
...     ['Auric','Goldfinger'],
...     ['Ernst','Blofeld'],
...     ]
>>> with open('villains','wt') as fout:
...     csvout = csv.writer(fout)
...     csvout.writerows(villains)
... 
>>> 
>>> import csv
>>> with open('villains', 'rt') as fin:
...     cin = csv.reader(fin)
...     villains = [row for row in cin]
... 
>>> print(villains)
[['Doctor', 'No'], ['Rosa', 'Klebb'], ['Mister', 'Big'], ['Auric', 'Goldfinger'], ['Ernst', 'Blofeld']]
>>>
>>> import csv
>>> with open('villains', 'rt') as fin:
...     cin = csv.DictReader(fin, fieldnames=['first','last'])
...     villains = [row for row in cin]
... 
>>> print(villains)
[{'last': 'No', 'first': 'Doctor'}, {'last': 'Klebb', 'first': 'Rosa'}, {'last': 'Big', 'first': 'Mister'}, {'last': 'Goldfinger', 'first': 'Auric'}, {'last': 'Blofeld', 'first': 'Ernst'}]
>>> 
>>> import csv
>>> villains = [
...     {'first':'Doctor', 'last':'No'},
...     {'first':'Rosa', 'last':'Klebb'},
...     {'first':'Mister', 'last':'Big'},
...     {'first':'Auric', 'last':'Goldfinger'},
...     {'first':'Ernst', 'last':'Blofeld'}
...     ]
>>> with open('villains', 'wt') as fout:
...     cout = csv.DictWriter(fout, ['first','last'])
...     cout.writeheader()
...     cout.writerows(villains)
... 
>>>
>>> import csv
>>> with open('villains', 'rt') as fin:
...     cin = csv.DictReader(fin)
...     villains = [row for row in cin]
... 
>>> print(villains)
[{'last': 'No', 'first': 'Doctor'}, {'last': 'Klebb', 'first': 'Rosa'}, {'last': 'Big', 'first': 'Mister'}, {'last': 'Goldfinger', 'first': 'Auric'}, {'last': 'Blofeld', 'first': 'Ernst'}]
>>> 
============================ XML (參考 defusedxml, 可安全parse)
#### menu.xml
<?xml version="1.0"?>
<menu>
	<breakfast hours="7-11">
		<item price="$6.00">breakfast burritos</item>
		<item price="$4.00">pancakes</item>
	</breakfast>
	<lunch hours="11-3">
		<item price="$5.00">hamburger</item>
	</lunch>
	<dinner hours="3-10">
		<item price="$8.00">spaghetti</item>
	</dinner>
</menu>
####
>>> import xml.etree.ElementTree as et
>>> tree = et.ElementTree(file='menu.xml')
>>> root = tree.getroot()
>>> root.tag
'menu'
>>> for child in root:
...     print('tag:',child.tag,'attributes',child.attrib)
... 
tag: breakfast attributes {'hours': '7-11'}
tag: lunch attributes {'hours': '11-3'}
tag: dinner attributes {'hours': '3-10'}
>>> len(root) # root sections
3
>>> len(root[0]) # breakfast items
2
============================ HTML
talk later
============================ JSON
>>> menu = \
... {
... "breakfast":{
...     "hours":"7-11",
...     "items":{
...             "breakfast burritos":"$6.00",
...             "pancakes":"$4.00"
...             }
...     },
... "lunch":{
...     "hours":"11-3",
...     "items":{
...             "hamburgur":"$5.00"
...             }
...     },
... "dinner":{
...     "hours":"3-10",
...     "items":{
...             "spaghetti":"$8.00"
...             }
...     }
... }
>>> 
>>> import json
>>> menu_json = json.dumps(menu)
>>> menu_json
'{"lunch": {"items": {"hamburgur": "$5.00"}, "hours": "11-3"}, "breakfast": {"items": {"breakfast burritos": "$6.00", "pancakes": "$4.00"}, "hours": "7-11"}, "dinner": {"items": {"spaghetti": "$8.00"}, "hours": "3-10"}}'
>>> 
>>> menu2 = json.loads(menu_json)
>>> menu2
{'breakfast': {'items': {'breakfast burritos': '$6.00', 'pancakes': '$4.00'}, 'hours': '7-11'}, 'lunch': {'items': {'hamburgur': '$5.00'}, 'hours': '11-3'}, 'dinner': {'items': {'spaghetti': '$8.00'}, 'hours': '3-10'}}
>>> 
#### datetime tp jsons
>>> import datetime
>>> now = datetime.datetime.utcnow()
>>> now_str=str(now)
>>> now
datetime.datetime(2016, 11, 15, 13, 53, 25, 33449)
>>> now_str
'2016-11-15 13:53:25.033449'
>>> json.dumps(now_str)
'"2016-11-15 13:53:25.033449"'
>>> from time import mktime
>>> now_epoch = int(mktime(now.timetuple()))
>>> now_epoch
1479189205
>>> json.dumps(now_epoch)
'1479189205'
>>> 
>>> type(now)
<class 'datetime.datetime'>
>>> isinstance(now, datetime.datetime)
True
============================ 設定檔
#### settings.cfg
[english]
greeting = Hello

[french]
greeting = Bonjour

[files]
home = /usr/local
# simple interpolation:
bin = %(home)s/bin
#### 
>>> import configparser
>>> cfg = configparser.ConfigParser()
>>> cfg.read('settings.cfg')
['settings.cfg']
>>> cfg
<configparser.ConfigParser object at 0x102198400>
>>> cfg['french']
<Section: french>
>>> cfg['french']['greeting']
'Bonjour'
>>> cfg['files']['bin']
'/usr/local/bin'
============================ 序列化
>>> import pickle
>>> import datetime
>>> now1 = datetime.datetime.utcnow()
>>> pickled = pickle.dumps(now1)
>>> now2 = pickle.loads(pickled)
>>> now1
datetime.datetime(2016, 11, 15, 14, 8, 34, 536766)
>>> now2
datetime.datetime(2016, 11, 15, 14, 8, 34, 536766)
>>>
>>> import pickle
>>> class Obj:
...     def __str__(self):
...             return 'tiny'
... 
>>> obj1 = Obj()
>>> obj1
<__main__.Obj object at 0x10230c7f0>
>>> str(obj1)
'tiny'
>>> pickled = pickle.dumps(obj1) # 二進位化
>>> pickled
b'\x80\x03c__main__\nObj\nq\x00)\x81q\x01.'
>>> obj2 = pickle.loads(pickled) # 建立副本
>>> obj2
<__main__.Obj object at 0x102311518>
>>> str(obj2)
'tiny'
============================ 關聯式資料庫 (可參考SQLAlchemy, pip install sqlalchemy)
>>> import sqlite3
>>> conn = sqlite3.connect('enterprise.db')
>>> curs = conn.cursor()
>>> curs.execute('''create table zoo
... (critter varchar(20) primary key,
... count int,
... damages float)''')
<sqlite3.Cursor object at 0x1022cef10>
>>> curs.execute('insert into zoo values("duck",5,0.0)')
<sqlite3.Cursor object at 0x1022cef10>
>>> curs.execute('insert into zoo values("bear",2,1000.0)')
<sqlite3.Cursor object at 0x1022cef10>
>>> ins = 'insert into zoo(critter, count, damages)values(?,?,?)'
>>> curs.execute(ins,('weasel',1,2000.0))
<sqlite3.Cursor object at 0x1022cef10>
>>> curs.execute('select * from zoo')
<sqlite3.Cursor object at 0x1022cef10>
>>> rows = curs.fetchall()
>>> print(rows)
[('duck', 5, 0.0), ('bear', 2, 1000.0), ('weasel', 1, 2000.0)]
>>> curs.execute('select * from zoo order by count')
<sqlite3.Cursor object at 0x1022cef10>
>>> curs.fetchall()
[('weasel', 1, 2000.0), ('bear', 2, 1000.0), ('duck', 5, 0.0)]
>>> curs.execute('select * from zoo order by count desc')
<sqlite3.Cursor object at 0x1022cef10>
>>> curs.fetchall()
[('duck', 5, 0.0), ('bear', 2, 1000.0), ('weasel', 1, 2000.0)]
>>> curs.close()
>>> conn.close()

############################[WEB]############################
>>> import urllib.request as ur
>>> url='http://www.google.com/‘
>>> conn=ur.urlopen(url)
>>> print(conn)
<http.client.HTTPResponse object at 0x101e14630>
>>> conn.read()
b'<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="zh-TW"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"><meta content="/images/branding/googleg/1x/googleg_standard_color_128dp.png" itemprop="image"><title>Google</title><script>(func ……
>>> print(conn.status)
200
>>> print(conn.getheader('Content-Type'))
text/html; charset=Big5
>>> for key, value in conn.getheaders():
...     print(key, value)
... 
Date Wed, 16 Nov 2016 11:40:19 GMT
Expires -1
Cache-Control private, max-age=0
Content-Type text/html; charset=Big5
P3P CP="This is not a P3P policy! See https://www.google.com/support/accounts/answer/151657?hl=en for more info."
Server gws
X-XSS-Protection 1; mode=block
X-Frame-Options SAMEORIGIN
Set-Cookie NID=91=W7qCYwVT6d2Wpu9AceBYG4F9_cLQ34PfaxieDVgMbu4Go88pe5fecVabiGHDkaZ2zRLbxUQfNcOAvxei-FfxMXphp5fU6bEzVBxDUlsGeevt9pMuT2oqpfMsJuAjqVkr; expires=Thu, 18-May-2017 11:40:19 GMT; path=/; domain=.google.com.tw; HttpOnly
Accept-Ranges none
Vary Accept-Encoding
Connection close
>>> 
#### pip install requests (another choose)
>>> import requests
>>> url = 'http://www.google.com/'
>>> resp = requests.get(url)
>>> resp
<Response [200]>
>>> print(resp.text)
<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="zh-TW"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"><meta content="/images/branding/googleg/1x/goo……
>>>
============================ Web Server
cmd:python3 -m http.server [8000] #[]可以指定port
chrome:http://localhost:8000/

============================ pip install bottle (web框架)
#### bottle1.py
from bottle import route, run

@route('/')
def home():
    return "It isn't fancy, but it's my home page"

run(host='localhost',port=9999)
#### python3 bottle1.py
#### Bottle v0.12.10 server starting up (using WSGIRefServer())...
#### Listening on http://localhost:9999/
————————————
#### bottle1.py
from bottle import route, run, static_file

@route('/')
def home():
    return static_file('index.html', root='.')

run(host='localhost',port=9999)
#### python3 bottle1.py
#### Bottle v0.12.10 server starting up (using WSGIRefServer())...
#### Listening on http://localhost:9999/
————————————
#### bottle1.py
from bottle import route, run, static_file

@route('/')
def home():
    return static_file('index.html', root='.')

@route('/echo/<thing>')
def echo(thing):
    return 'say hello to my little friend: %s' % thing

run(host='localhost',port=9999)
#### python3 bottle1.py
#### Bottle v0.12.10 server starting up (using WSGIRefServer())...
#### Listening on http://localhost:9999/
#### http://localhost:9999/echo/Edwin
#### display: say hello to my little friend: Edwin
>>> import requests
>>> resp = requests.get('http://localhost:9999/echo/Edwin')
>>> if(resp.status_code==200 and resp.text=='say hello to my little friend: Edwin'):
...     print('good!')
... 
good!

============================ pip install flask (web框架)
#### flask1.py
from flask import Flask
app = Flask(__name__, static_folder='.', static_url_path='')

@app.route('/')
def home():
	return app.send_static_file('index.html')

@app.route('/echo/<thing>')
def echo(thing):
	return thing

app.run(port=9999, debug=True)
#### python3 bottle1.py
#### * Running on http://127.0.0.1:9999/ (Press CTRL+C to quit)
#### * Restarting with stat
#### * Debugger is active!
#### * Debugger pin code: 674-991-295

============================ web 服務自動化, pip install beautifulsoup4
>>> import webbrowser
>>> url = 'http://www.google.com'
>>> webbrowser.open(url)
True
>>> webbrowser.open_new(url)
True
>>> webbrowser.open_new_tab(url)
True

============================ pip freeze | xargs pip uninstall -y 清空 pip 裡套件
